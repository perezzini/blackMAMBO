local
in
datatype token =
    AMPER
  | ARRAY
  | BREAK
  | CD
  | CI
  | COMA
  | DIST
  | DIV
  | DO
  | DOSP
  | DOSPIG
  | ELSE
  | END
  | EOF
  | FOR
  | FUNCTION
  | ID of string
  | IF
  | IGUAL
  | IN
  | LD
  | LET
  | LI
  | LITERAL of string
  | MAS
  | MAYIG
  | MAYOR
  | MENIG
  | MENOR
  | MENOS
  | NIL
  | NRO of int
  | OF
  | PCOMA
  | PD
  | PI
  | PIPE
  | POR
  | PTO
  | THEN
  | TO
  | TYPE
  | VAR
  | WHILE
end;

open Obj Parsing;
prim_val vector_ : int -> 'a -> 'a Vector.vector = 2 "make_vect";
prim_val update_ : 'a Vector.vector -> int -> 'a -> unit = 3 "set_vect_item";

open tigerabs

fun P() = !tigernlin.num_linea

fun nombre(SimpleVar s) = s
| nombre _ = raise Fail "Imposible que no sea SimpleVar!"

fun fundeLFunTipos(TypeDec[dt], (TypeDec(hdt))::t) =
	TypeDec(dt::hdt)::t
| fundeLFunTipos(FunctionDec[dt], (FunctionDec(hdt))::t) =
	FunctionDec(dt::hdt)::t
| fundeLFunTipos(d1, dl) =
	d1::dl

(* Line 20, file tigergrm.sml *)
val yytransl = #[
  257 (* AMPER *),
  258 (* ARRAY *),
  259 (* BREAK *),
  260 (* CD *),
  261 (* CI *),
  262 (* COMA *),
  263 (* DIST *),
  264 (* DIV *),
  265 (* DO *),
  266 (* DOSP *),
  267 (* DOSPIG *),
  268 (* ELSE *),
  269 (* END *),
  270 (* EOF *),
  271 (* FOR *),
  272 (* FUNCTION *),
  273 (* ID *),
  274 (* IF *),
  275 (* IGUAL *),
  276 (* IN *),
  277 (* LD *),
  278 (* LET *),
  279 (* LI *),
  280 (* LITERAL *),
  281 (* MAS *),
  282 (* MAYIG *),
  283 (* MAYOR *),
  284 (* MENIG *),
  285 (* MENOR *),
  286 (* MENOS *),
  287 (* NIL *),
  288 (* NRO *),
  289 (* OF *),
  290 (* PCOMA *),
  291 (* PD *),
  292 (* PI *),
  293 (* PIPE *),
  294 (* POR *),
  295 (* PTO *),
  296 (* THEN *),
  297 (* TO *),
  298 (* TYPE *),
  299 (* VAR *),
  300 (* WHILE *),
    0];

val yylhs = "\255\255\
\\001\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\\006\000\007\000\007\000\008\000\008\000\008\000\014\000\014\000\
\\011\000\011\000\011\000\002\000\002\000\002\000\003\000\005\000\
\\005\000\005\000\012\000\012\000\013\000\013\000\004\000\009\000\
\\009\000\009\000\010\000\010\000\010\000\000\000";

val yylen = "\002\000\
\\002\000\001\000\002\000\001\000\001\000\001\000\001\000\003\000\
\\005\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\\003\000\003\000\003\000\003\000\003\000\002\000\003\000\004\000\
\\004\000\006\000\004\000\008\000\004\000\005\000\007\000\006\000\
\\004\000\003\000\001\000\005\000\003\000\000\000\002\000\000\000\
\\004\000\001\000\001\000\001\000\003\000\003\000\001\000\003\000\
\\001\000\000\000\004\000\006\000\007\000\009\000\003\000\003\000\
\\001\000\000\000\001\000\003\000\004\000\002\000";

val yydefred = "\000\000\
\\000\000\000\000\006\000\000\000\047\000\000\000\000\000\005\000\
\\000\000\004\000\002\000\000\000\000\000\062\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
\\043\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\039\000\000\000\000\000\
\\023\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\060\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\
\\000\000\033\000\000\000\024\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\041\000\044\000\000\000\000\000\
\\030\000\000\000\000\000\009\000\000\000\056\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\034\000\000\000\000\000\000\000\055\000\048\000\000\000\000\000\
\\046\000\045\000\000\000\031\000\036\000\000\000\000\000\000\000\
\\000\000\000\000";

val yydgoto = "\002\000\
\\014\000\101\000\015\000\097\000\098\000\086\000\087\000\060\000\
\\062\000\017\000\023\000\024\000\025\000\026\000";

val yysindex = "\020\000\
\\246\001\000\000\000\000\009\255\000\000\246\001\053\255\000\000\
\\246\001\000\000\000\000\216\001\246\001\000\000\237\254\147\003\
\\008\255\014\255\049\003\009\255\009\255\009\255\053\255\000\000\
\\000\000\007\255\012\255\000\000\083\003\161\003\009\255\246\001\
\\246\001\246\001\246\001\000\000\246\001\246\001\246\001\246\001\
\\246\001\246\001\246\001\246\001\246\001\246\001\246\001\009\255\
\\246\001\246\001\020\255\040\255\255\254\000\000\111\255\246\001\
\\000\000\246\001\041\255\042\255\194\003\026\255\106\004\078\255\
\\000\000\078\255\012\255\078\255\078\255\078\255\078\255\012\255\
\\092\004\000\000\208\003\078\004\000\000\010\002\240\003\009\255\
\\001\255\009\255\246\001\000\000\115\003\254\003\031\255\078\004\
\\246\001\000\000\246\001\000\000\034\255\246\001\246\001\061\255\
\\068\255\046\255\050\255\009\255\000\000\000\000\076\255\078\004\
\\000\000\246\001\246\001\000\000\032\004\000\000\246\001\046\004\
\\078\004\009\255\009\255\045\255\009\255\054\255\246\001\079\255\
\\000\000\009\255\078\004\246\001\000\000\000\000\009\255\246\001\
\\000\000\000\000\078\004\000\000\000\000\078\004\070\255\078\004\
\\246\001\078\004";

val yyrindex = "\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\071\255\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\155\255\000\000\
\\241\255\000\000\000\000\000\000\000\000\000\000\071\255\000\000\
\\000\000\000\000\114\000\000\000\000\000\000\000\081\255\062\255\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\065\255\000\000\064\255\243\000\
\\028\000\030\001\157\000\073\001\116\001\159\001\202\001\200\000\
\\040\002\071\000\000\000\080\002\000\000\000\000\024\003\074\255\
\\000\000\000\000\000\000\000\000\000\000\244\254\000\000\120\002\
\\000\000\000\000\062\255\000\000\198\255\000\000\000\000\000\000\
\\251\254\000\000\000\000\094\255\000\000\000\000\000\000\242\254\
\\000\000\000\000\000\000\000\000\096\255\000\000\000\000\000\000\
\\160\002\000\000\037\255\000\000\000\000\000\000\000\000\000\000\
\\000\000\081\255\200\002\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\230\000\000\000\000\000\240\002\000\000\246\000\
\\000\000\251\000";

val yygindex = "\000\000\
\\000\000\000\000\031\000\000\000\163\255\255\255\164\255\253\255\
\\029\000\000\000\000\000\000\000\000\000\098\000";

val YYTABLESIZE = 1424;
val yytable = "\016\000\
\\035\000\051\000\099\000\031\000\019\000\051\000\118\000\027\000\
\\082\000\083\000\029\000\030\000\046\000\120\000\121\000\049\000\
\\032\000\005\000\047\000\035\000\001\000\126\000\035\000\100\000\
\\049\000\005\000\055\000\051\000\051\000\049\000\061\000\063\000\
\\064\000\065\000\018\000\066\000\067\000\068\000\069\000\070\000\
\\071\000\072\000\073\000\074\000\075\000\076\000\048\000\078\000\
\\079\000\045\000\051\000\052\000\053\000\085\000\127\000\080\000\
\\088\000\050\000\081\000\089\000\092\000\059\000\090\000\128\000\
\\011\000\108\000\111\000\011\000\020\000\011\000\114\000\050\000\
\\011\000\115\000\130\000\011\000\011\000\011\000\077\000\011\000\
\\116\000\104\000\117\000\011\000\011\000\035\000\119\000\109\000\
\\137\000\061\000\040\000\132\000\112\000\113\000\021\000\022\000\
\\058\000\011\000\011\000\057\000\011\000\038\000\038\000\011\000\
\\011\000\011\000\011\000\043\000\050\000\123\000\096\000\102\000\
\\103\000\003\000\050\000\045\000\037\000\131\000\133\000\110\000\
\\054\000\000\000\134\000\084\000\000\000\004\000\136\000\005\000\
\\006\000\000\000\096\000\000\000\007\000\000\000\008\000\138\000\
\\000\000\000\000\000\000\000\000\009\000\010\000\011\000\000\000\
\\125\000\096\000\012\000\129\000\000\000\000\000\000\000\000\000\
\\059\000\000\000\013\000\059\000\000\000\135\000\059\000\059\000\
\\059\000\059\000\059\000\059\000\000\000\059\000\059\000\059\000\
\\059\000\000\000\059\000\000\000\000\000\059\000\059\000\059\000\
\\000\000\000\000\000\000\059\000\059\000\059\000\059\000\059\000\
\\059\000\000\000\000\000\000\000\059\000\059\000\000\000\059\000\
\\059\000\059\000\059\000\059\000\059\000\059\000\061\000\000\000\
\\000\000\061\000\061\000\061\000\061\000\061\000\061\000\000\000\
\\061\000\061\000\061\000\061\000\000\000\061\000\000\000\000\000\
\\061\000\061\000\061\000\000\000\000\000\000\000\061\000\061\000\
\\061\000\061\000\061\000\061\000\000\000\000\000\000\000\061\000\
\\061\000\000\000\061\000\061\000\061\000\061\000\061\000\061\000\
\\061\000\007\000\000\000\000\000\007\000\000\000\007\000\007\000\
\\007\000\007\000\000\000\000\000\007\000\007\000\007\000\000\000\
\\007\000\000\000\000\000\007\000\007\000\007\000\000\000\000\000\
\\000\000\007\000\007\000\007\000\007\000\007\000\007\000\000\000\
\\000\000\000\000\007\000\007\000\000\000\007\000\007\000\000\000\
\\007\000\007\000\007\000\007\000\021\000\000\000\000\000\021\000\
\\000\000\021\000\021\000\021\000\021\000\000\000\000\000\021\000\
\\021\000\021\000\000\000\021\000\000\000\000\000\021\000\021\000\
\\021\000\000\000\000\000\000\000\021\000\021\000\021\000\021\000\
\\021\000\021\000\000\000\000\000\000\000\021\000\021\000\000\000\
\\021\000\021\000\000\000\021\000\021\000\021\000\021\000\020\000\
\\000\000\000\000\020\000\000\000\020\000\020\000\020\000\020\000\
\\000\000\000\000\020\000\020\000\020\000\000\000\020\000\000\000\
\\000\000\020\000\020\000\020\000\000\000\000\000\000\000\020\000\
\\020\000\020\000\020\000\020\000\020\000\000\000\000\000\000\000\
\\020\000\020\000\000\000\020\000\020\000\000\000\020\000\020\000\
\\020\000\020\000\022\000\000\000\000\000\022\000\000\000\022\000\
\\022\000\000\000\022\000\000\000\000\000\022\000\022\000\022\000\
\\000\000\022\000\000\000\000\000\022\000\022\000\022\000\000\000\
\\000\000\000\000\022\000\022\000\022\000\022\000\022\000\022\000\
\\000\000\000\000\000\000\022\000\022\000\000\000\022\000\000\000\
\\000\000\022\000\022\000\022\000\022\000\018\000\000\000\000\000\
\\018\000\000\000\018\000\018\000\000\000\018\000\000\000\000\000\
\\018\000\018\000\018\000\000\000\018\000\000\000\000\000\018\000\
\\018\000\018\000\000\000\000\000\000\000\018\000\018\000\018\000\
\\018\000\018\000\018\000\000\000\000\000\000\000\018\000\018\000\
\\000\000\018\000\000\000\000\000\018\000\018\000\018\000\018\000\
\\019\000\000\000\000\000\019\000\000\000\019\000\019\000\000\000\
\\019\000\000\000\000\000\019\000\019\000\019\000\000\000\019\000\
\\000\000\000\000\019\000\019\000\019\000\000\000\000\000\000\000\
\\019\000\019\000\019\000\019\000\019\000\019\000\000\000\000\000\
\\000\000\019\000\019\000\000\000\019\000\000\000\000\000\019\000\
\\019\000\019\000\019\000\017\000\000\000\052\000\017\000\000\000\
\\017\000\052\000\000\000\017\000\000\000\000\000\017\000\017\000\
\\017\000\000\000\017\000\000\000\000\000\053\000\017\000\017\000\
\\000\000\053\000\054\000\000\000\000\000\000\000\054\000\052\000\
\\052\000\000\000\000\000\000\000\017\000\017\000\000\000\017\000\
\\000\000\000\000\017\000\017\000\017\000\017\000\012\000\053\000\
\\053\000\012\000\000\000\012\000\054\000\054\000\012\000\000\000\
\\000\000\012\000\012\000\012\000\000\000\012\000\000\000\000\000\
\\000\000\012\000\012\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\
\\012\000\000\000\012\000\000\000\000\000\012\000\012\000\012\000\
\\012\000\016\000\000\000\000\000\016\000\000\000\016\000\000\000\
\\000\000\016\000\000\000\000\000\016\000\016\000\016\000\000\000\
\\016\000\000\000\000\000\000\000\016\000\016\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\016\000\016\000\000\000\016\000\000\000\000\000\
\\016\000\016\000\016\000\016\000\015\000\000\000\000\000\015\000\
\\000\000\015\000\000\000\000\000\015\000\000\000\000\000\015\000\
\\015\000\015\000\000\000\015\000\000\000\000\000\000\000\015\000\
\\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\015\000\015\000\000\000\
\\015\000\000\000\000\000\015\000\015\000\015\000\015\000\014\000\
\\000\000\000\000\014\000\000\000\014\000\000\000\000\000\014\000\
\\000\000\000\000\014\000\014\000\014\000\000\000\014\000\000\000\
\\000\000\000\000\014\000\014\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\014\000\014\000\000\000\014\000\000\000\000\000\014\000\014\000\
\\014\000\014\000\013\000\000\000\000\000\013\000\000\000\013\000\
\\000\000\000\000\013\000\000\000\000\000\013\000\013\000\013\000\
\\000\000\013\000\003\000\000\000\000\000\013\000\013\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\
\\005\000\006\000\000\000\013\000\013\000\007\000\013\000\008\000\
\\000\000\013\000\013\000\013\000\013\000\009\000\010\000\011\000\
\\003\000\000\000\028\000\012\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\013\000\004\000\000\000\005\000\006\000\
\\000\000\000\000\033\000\007\000\000\000\008\000\000\000\000\000\
\\034\000\035\000\000\000\009\000\010\000\011\000\000\000\000\000\
\\000\000\012\000\000\000\000\000\037\000\000\000\000\000\000\000\
\\000\000\013\000\038\000\039\000\040\000\041\000\042\000\043\000\
\\000\000\000\000\000\000\010\000\000\000\010\000\044\000\045\000\
\\010\000\000\000\094\000\010\000\010\000\010\000\000\000\010\000\
\\000\000\000\000\000\000\010\000\010\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\010\000\010\000\000\000\010\000\000\000\000\000\010\000\
\\010\000\010\000\010\000\008\000\000\000\008\000\000\000\000\000\
\\008\000\000\000\000\000\008\000\008\000\008\000\000\000\008\000\
\\000\000\000\000\000\000\008\000\008\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\008\000\008\000\000\000\000\000\000\000\000\000\008\000\
\\008\000\008\000\008\000\027\000\000\000\027\000\000\000\000\000\
\\027\000\000\000\000\000\027\000\027\000\027\000\000\000\027\000\
\\000\000\000\000\000\000\027\000\027\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\027\000\027\000\000\000\000\000\000\000\000\000\027\000\
\\027\000\027\000\027\000\026\000\000\000\026\000\000\000\000\000\
\\026\000\000\000\000\000\026\000\026\000\026\000\000\000\026\000\
\\000\000\000\000\000\000\026\000\026\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\026\000\026\000\000\000\000\000\000\000\000\000\026\000\
\\026\000\026\000\026\000\032\000\000\000\032\000\000\000\000\000\
\\032\000\000\000\000\000\032\000\032\000\032\000\000\000\032\000\
\\000\000\000\000\000\000\032\000\032\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\032\000\032\000\000\000\000\000\000\000\000\000\032\000\
\\032\000\032\000\032\000\028\000\000\000\028\000\000\000\000\000\
\\028\000\000\000\000\000\028\000\028\000\028\000\000\000\028\000\
\\000\000\000\000\000\000\028\000\028\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\028\000\028\000\000\000\000\000\000\000\000\000\028\000\
\\028\000\028\000\028\000\025\000\000\000\025\000\000\000\000\000\
\\025\000\000\000\000\000\000\000\025\000\025\000\000\000\025\000\
\\000\000\000\000\000\000\025\000\025\000\000\000\000\000\000\000\
\\000\000\033\000\000\000\000\000\000\000\000\000\000\000\034\000\
\\035\000\025\000\025\000\000\000\000\000\000\000\000\000\025\000\
\\025\000\025\000\025\000\037\000\000\000\000\000\000\000\000\000\
\\000\000\038\000\039\000\040\000\041\000\042\000\043\000\000\000\
\\000\000\000\000\000\000\033\000\000\000\044\000\045\000\000\000\
\\050\000\034\000\035\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\037\000\000\000\000\000\
\\000\000\000\000\000\000\038\000\039\000\040\000\041\000\042\000\
\\043\000\000\000\000\000\033\000\056\000\057\000\000\000\044\000\
\\045\000\034\000\035\000\000\000\000\000\000\000\000\000\105\000\
\\000\000\000\000\000\000\000\000\000\000\037\000\000\000\000\000\
\\000\000\000\000\000\000\038\000\039\000\040\000\041\000\042\000\
\\043\000\000\000\000\000\033\000\106\000\000\000\000\000\044\000\
\\045\000\034\000\035\000\000\000\000\000\000\000\000\000\000\000\
\\036\000\033\000\000\000\000\000\000\000\037\000\000\000\034\000\
\\035\000\058\000\000\000\038\000\039\000\040\000\041\000\042\000\
\\043\000\000\000\000\000\037\000\000\000\000\000\000\000\044\000\
\\045\000\038\000\039\000\040\000\041\000\042\000\043\000\000\000\
\\000\000\000\000\033\000\000\000\000\000\044\000\045\000\091\000\
\\034\000\035\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\033\000\000\000\000\000\093\000\037\000\000\000\034\000\035\000\
\\000\000\000\000\038\000\039\000\040\000\041\000\042\000\043\000\
\\000\000\000\000\037\000\000\000\000\000\000\000\044\000\045\000\
\\038\000\039\000\040\000\041\000\042\000\043\000\000\000\000\000\
\\033\000\000\000\000\000\000\000\044\000\045\000\034\000\035\000\
\\000\000\000\000\000\000\095\000\000\000\000\000\033\000\000\000\
\\000\000\000\000\037\000\000\000\034\000\035\000\000\000\000\000\
\\038\000\039\000\040\000\041\000\042\000\043\000\000\000\000\000\
\\037\000\000\000\000\000\000\000\044\000\045\000\038\000\039\000\
\\040\000\041\000\042\000\043\000\000\000\000\000\000\000\107\000\
\\033\000\000\000\044\000\045\000\000\000\122\000\034\000\035\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\033\000\000\000\
\\000\000\000\000\037\000\000\000\034\000\035\000\124\000\000\000\
\\038\000\039\000\040\000\041\000\042\000\043\000\000\000\000\000\
\\037\000\000\000\000\000\000\000\044\000\045\000\038\000\039\000\
\\040\000\041\000\042\000\043\000\000\000\000\000\033\000\000\000\
\\000\000\000\000\044\000\045\000\034\000\035\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\033\000\000\000\000\000\000\000\
\\037\000\000\000\034\000\035\000\000\000\000\000\038\000\039\000\
\\040\000\041\000\042\000\043\000\000\000\000\000\037\000\000\000\
\\034\000\035\000\044\000\045\000\038\000\039\000\040\000\041\000\
\\042\000\043\000\000\000\000\000\037\000\000\000\000\000\000\000\
\\000\000\045\000\038\000\039\000\040\000\041\000\042\000\043\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000";

val yycheck = "\001\000\
\\013\001\016\001\002\001\023\001\006\000\020\001\100\000\009\000\
\\010\001\011\001\012\000\013\000\005\001\106\000\107\000\021\001\
\\036\001\017\001\011\001\008\001\001\000\115\000\035\001\023\001\
\\011\001\017\001\020\001\042\001\043\001\035\001\032\000\033\000\
\\034\000\035\000\004\000\037\000\038\000\039\000\040\000\041\000\
\\042\000\043\000\044\000\045\000\046\000\047\000\039\001\049\000\
\\050\000\038\001\020\000\021\000\022\000\055\000\010\001\036\001\
\\058\000\021\001\019\001\019\001\035\001\031\000\021\001\019\001\
\\001\001\035\001\033\001\004\001\016\001\006\001\010\001\035\001\
\\009\001\006\001\021\001\012\001\013\001\014\001\048\000\016\001\
\\035\001\083\000\033\001\020\001\021\001\008\001\011\001\089\000\
\\019\001\091\000\020\001\013\001\094\000\095\000\042\001\043\001\
\\035\001\034\001\035\001\035\001\037\001\021\001\025\001\040\001\
\\041\001\042\001\043\001\030\001\035\001\111\000\080\000\081\000\
\\082\000\003\001\021\001\038\001\021\001\119\000\122\000\091\000\
\\023\000\255\255\124\000\013\001\255\255\015\001\128\000\017\001\
\\018\001\255\255\100\000\255\255\022\001\255\255\024\001\137\000\
\\255\255\255\255\255\255\255\255\030\001\031\001\032\001\255\255\
\\114\000\115\000\036\001\117\000\255\255\255\255\255\255\255\255\
\\122\000\255\255\044\001\001\001\255\255\127\000\004\001\005\001\
\\006\001\007\001\008\001\009\001\255\255\011\001\012\001\013\001\
\\014\001\255\255\016\001\255\255\255\255\019\001\020\001\021\001\
\\255\255\255\255\255\255\025\001\026\001\027\001\028\001\029\001\
\\030\001\255\255\255\255\255\255\034\001\035\001\255\255\037\001\
\\038\001\039\001\040\001\041\001\042\001\043\001\001\001\255\255\
\\255\255\004\001\005\001\006\001\007\001\008\001\009\001\255\255\
\\011\001\012\001\013\001\014\001\255\255\016\001\255\255\255\255\
\\019\001\020\001\021\001\255\255\255\255\255\255\025\001\026\001\
\\027\001\028\001\029\001\030\001\255\255\255\255\255\255\034\001\
\\035\001\255\255\037\001\038\001\039\001\040\001\041\001\042\001\
\\043\001\001\001\255\255\255\255\004\001\255\255\006\001\007\001\
\\008\001\009\001\255\255\255\255\012\001\013\001\014\001\255\255\
\\016\001\255\255\255\255\019\001\020\001\021\001\255\255\255\255\
\\255\255\025\001\026\001\027\001\028\001\029\001\030\001\255\255\
\\255\255\255\255\034\001\035\001\255\255\037\001\038\001\255\255\
\\040\001\041\001\042\001\043\001\001\001\255\255\255\255\004\001\
\\255\255\006\001\007\001\008\001\009\001\255\255\255\255\012\001\
\\013\001\014\001\255\255\016\001\255\255\255\255\019\001\020\001\
\\021\001\255\255\255\255\255\255\025\001\026\001\027\001\028\001\
\\029\001\030\001\255\255\255\255\255\255\034\001\035\001\255\255\
\\037\001\038\001\255\255\040\001\041\001\042\001\043\001\001\001\
\\255\255\255\255\004\001\255\255\006\001\007\001\008\001\009\001\
\\255\255\255\255\012\001\013\001\014\001\255\255\016\001\255\255\
\\255\255\019\001\020\001\021\001\255\255\255\255\255\255\025\001\
\\026\001\027\001\028\001\029\001\030\001\255\255\255\255\255\255\
\\034\001\035\001\255\255\037\001\038\001\255\255\040\001\041\001\
\\042\001\043\001\001\001\255\255\255\255\004\001\255\255\006\001\
\\007\001\255\255\009\001\255\255\255\255\012\001\013\001\014\001\
\\255\255\016\001\255\255\255\255\019\001\020\001\021\001\255\255\
\\255\255\255\255\025\001\026\001\027\001\028\001\029\001\030\001\
\\255\255\255\255\255\255\034\001\035\001\255\255\037\001\255\255\
\\255\255\040\001\041\001\042\001\043\001\001\001\255\255\255\255\
\\004\001\255\255\006\001\007\001\255\255\009\001\255\255\255\255\
\\012\001\013\001\014\001\255\255\016\001\255\255\255\255\019\001\
\\020\001\021\001\255\255\255\255\255\255\025\001\026\001\027\001\
\\028\001\029\001\030\001\255\255\255\255\255\255\034\001\035\001\
\\255\255\037\001\255\255\255\255\040\001\041\001\042\001\043\001\
\\001\001\255\255\255\255\004\001\255\255\006\001\007\001\255\255\
\\009\001\255\255\255\255\012\001\013\001\014\001\255\255\016\001\
\\255\255\255\255\019\001\020\001\021\001\255\255\255\255\255\255\
\\025\001\026\001\027\001\028\001\029\001\030\001\255\255\255\255\
\\255\255\034\001\035\001\255\255\037\001\255\255\255\255\040\001\
\\041\001\042\001\043\001\001\001\255\255\016\001\004\001\255\255\
\\006\001\020\001\255\255\009\001\255\255\255\255\012\001\013\001\
\\014\001\255\255\016\001\255\255\255\255\016\001\020\001\021\001\
\\255\255\020\001\016\001\255\255\255\255\255\255\020\001\042\001\
\\043\001\255\255\255\255\255\255\034\001\035\001\255\255\037\001\
\\255\255\255\255\040\001\041\001\042\001\043\001\001\001\042\001\
\\043\001\004\001\255\255\006\001\042\001\043\001\009\001\255\255\
\\255\255\012\001\013\001\014\001\255\255\016\001\255\255\255\255\
\\255\255\020\001\021\001\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\034\001\
\\035\001\255\255\037\001\255\255\255\255\040\001\041\001\042\001\
\\043\001\001\001\255\255\255\255\004\001\255\255\006\001\255\255\
\\255\255\009\001\255\255\255\255\012\001\013\001\014\001\255\255\
\\016\001\255\255\255\255\255\255\020\001\021\001\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\034\001\035\001\255\255\037\001\255\255\255\255\
\\040\001\041\001\042\001\043\001\001\001\255\255\255\255\004\001\
\\255\255\006\001\255\255\255\255\009\001\255\255\255\255\012\001\
\\013\001\014\001\255\255\016\001\255\255\255\255\255\255\020\001\
\\021\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\034\001\035\001\255\255\
\\037\001\255\255\255\255\040\001\041\001\042\001\043\001\001\001\
\\255\255\255\255\004\001\255\255\006\001\255\255\255\255\009\001\
\\255\255\255\255\012\001\013\001\014\001\255\255\016\001\255\255\
\\255\255\255\255\020\001\021\001\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\034\001\035\001\255\255\037\001\255\255\255\255\040\001\041\001\
\\042\001\043\001\001\001\255\255\255\255\004\001\255\255\006\001\
\\255\255\255\255\009\001\255\255\255\255\012\001\013\001\014\001\
\\255\255\016\001\003\001\255\255\255\255\020\001\021\001\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\015\001\255\255\
\\017\001\018\001\255\255\034\001\035\001\022\001\037\001\024\001\
\\255\255\040\001\041\001\042\001\043\001\030\001\031\001\032\001\
\\003\001\255\255\035\001\036\001\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\044\001\015\001\255\255\017\001\018\001\
\\255\255\255\255\001\001\022\001\255\255\024\001\255\255\255\255\
\\007\001\008\001\255\255\030\001\031\001\032\001\255\255\255\255\
\\255\255\036\001\255\255\255\255\019\001\255\255\255\255\255\255\
\\255\255\044\001\025\001\026\001\027\001\028\001\029\001\030\001\
\\255\255\255\255\255\255\004\001\255\255\006\001\037\001\038\001\
\\009\001\255\255\041\001\012\001\013\001\014\001\255\255\016\001\
\\255\255\255\255\255\255\020\001\021\001\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\034\001\035\001\255\255\037\001\255\255\255\255\040\001\
\\041\001\042\001\043\001\004\001\255\255\006\001\255\255\255\255\
\\009\001\255\255\255\255\012\001\013\001\014\001\255\255\016\001\
\\255\255\255\255\255\255\020\001\021\001\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\034\001\035\001\255\255\255\255\255\255\255\255\040\001\
\\041\001\042\001\043\001\004\001\255\255\006\001\255\255\255\255\
\\009\001\255\255\255\255\012\001\013\001\014\001\255\255\016\001\
\\255\255\255\255\255\255\020\001\021\001\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\034\001\035\001\255\255\255\255\255\255\255\255\040\001\
\\041\001\042\001\043\001\004\001\255\255\006\001\255\255\255\255\
\\009\001\255\255\255\255\012\001\013\001\014\001\255\255\016\001\
\\255\255\255\255\255\255\020\001\021\001\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\034\001\035\001\255\255\255\255\255\255\255\255\040\001\
\\041\001\042\001\043\001\004\001\255\255\006\001\255\255\255\255\
\\009\001\255\255\255\255\012\001\013\001\014\001\255\255\016\001\
\\255\255\255\255\255\255\020\001\021\001\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\034\001\035\001\255\255\255\255\255\255\255\255\040\001\
\\041\001\042\001\043\001\004\001\255\255\006\001\255\255\255\255\
\\009\001\255\255\255\255\012\001\013\001\014\001\255\255\016\001\
\\255\255\255\255\255\255\020\001\021\001\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\034\001\035\001\255\255\255\255\255\255\255\255\040\001\
\\041\001\042\001\043\001\004\001\255\255\006\001\255\255\255\255\
\\009\001\255\255\255\255\255\255\013\001\014\001\255\255\016\001\
\\255\255\255\255\255\255\020\001\021\001\255\255\255\255\255\255\
\\255\255\001\001\255\255\255\255\255\255\255\255\255\255\007\001\
\\008\001\034\001\035\001\255\255\255\255\255\255\255\255\040\001\
\\041\001\042\001\043\001\019\001\255\255\255\255\255\255\255\255\
\\255\255\025\001\026\001\027\001\028\001\029\001\030\001\255\255\
\\255\255\255\255\255\255\001\001\255\255\037\001\038\001\255\255\
\\040\001\007\001\008\001\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\019\001\255\255\255\255\
\\255\255\255\255\255\255\025\001\026\001\027\001\028\001\029\001\
\\030\001\255\255\255\255\001\001\034\001\035\001\255\255\037\001\
\\038\001\007\001\008\001\255\255\255\255\255\255\255\255\013\001\
\\255\255\255\255\255\255\255\255\255\255\019\001\255\255\255\255\
\\255\255\255\255\255\255\025\001\026\001\027\001\028\001\029\001\
\\030\001\255\255\255\255\001\001\034\001\255\255\255\255\037\001\
\\038\001\007\001\008\001\255\255\255\255\255\255\255\255\255\255\
\\014\001\001\001\255\255\255\255\255\255\019\001\255\255\007\001\
\\008\001\009\001\255\255\025\001\026\001\027\001\028\001\029\001\
\\030\001\255\255\255\255\019\001\255\255\255\255\255\255\037\001\
\\038\001\025\001\026\001\027\001\028\001\029\001\030\001\255\255\
\\255\255\255\255\001\001\255\255\255\255\037\001\038\001\006\001\
\\007\001\008\001\255\255\255\255\255\255\255\255\255\255\255\255\
\\001\001\255\255\255\255\004\001\019\001\255\255\007\001\008\001\
\\255\255\255\255\025\001\026\001\027\001\028\001\029\001\030\001\
\\255\255\255\255\019\001\255\255\255\255\255\255\037\001\038\001\
\\025\001\026\001\027\001\028\001\029\001\030\001\255\255\255\255\
\\001\001\255\255\255\255\255\255\037\001\038\001\007\001\008\001\
\\255\255\255\255\255\255\012\001\255\255\255\255\001\001\255\255\
\\255\255\255\255\019\001\255\255\007\001\008\001\255\255\255\255\
\\025\001\026\001\027\001\028\001\029\001\030\001\255\255\255\255\
\\019\001\255\255\255\255\255\255\037\001\038\001\025\001\026\001\
\\027\001\028\001\029\001\030\001\255\255\255\255\255\255\034\001\
\\001\001\255\255\037\001\038\001\255\255\006\001\007\001\008\001\
\\255\255\255\255\255\255\255\255\255\255\255\255\001\001\255\255\
\\255\255\255\255\019\001\255\255\007\001\008\001\009\001\255\255\
\\025\001\026\001\027\001\028\001\029\001\030\001\255\255\255\255\
\\019\001\255\255\255\255\255\255\037\001\038\001\025\001\026\001\
\\027\001\028\001\029\001\030\001\255\255\255\255\001\001\255\255\
\\255\255\255\255\037\001\038\001\007\001\008\001\255\255\255\255\
\\255\255\255\255\255\255\255\255\001\001\255\255\255\255\255\255\
\\019\001\255\255\007\001\008\001\255\255\255\255\025\001\026\001\
\\027\001\028\001\029\001\030\001\255\255\255\255\019\001\255\255\
\\007\001\008\001\037\001\038\001\025\001\026\001\027\001\028\001\
\\029\001\030\001\255\255\255\255\019\001\255\255\255\255\255\255\
\\255\255\038\001\025\001\026\001\027\001\028\001\029\001\030\001\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\038\001";

val yyact = vector_ 63 (fn () => ((raise Fail "parser") : obj));
(* Rule 1, file tigergrm.y, line 54 *)
val _ = update_ yyact 1
(fn () => repr(let
val d__1__ = peekVal 1 : tigerabs.exp
in
( (d__1__) ) end : tigerabs.exp))
;
(* Rule 2, file tigergrm.y, line 56 *)
val _ = update_ yyact 2
(fn () => repr(let
val d__1__ = peekVal 0 : int
in
( IntExp((d__1__), P()) ) end : tigerabs.exp))
;
(* Rule 3, file tigergrm.y, line 57 *)
val _ = update_ yyact 3
(fn () => repr(let
in
( UnitExp(P()) ) end : tigerabs.exp))
;
(* Rule 4, file tigergrm.y, line 58 *)
val _ = update_ yyact 4
(fn () => repr(let
in
( NilExp(P()) ) end : tigerabs.exp))
;
(* Rule 5, file tigergrm.y, line 59 *)
val _ = update_ yyact 5
(fn () => repr(let
val d__1__ = peekVal 0 : string
in
( StringExp((d__1__), P()) ) end : tigerabs.exp))
;
(* Rule 6, file tigergrm.y, line 60 *)
val _ = update_ yyact 6
(fn () => repr(let
in
( BreakExp(P()) ) end : tigerabs.exp))
;
(* Rule 7, file tigergrm.y, line 61 *)
val _ = update_ yyact 7
(fn () => repr(let
val d__1__ = peekVal 0 : var
in
( VarExp((d__1__), P()) ) end : tigerabs.exp))
;
(* Rule 8, file tigergrm.y, line 62 *)
val _ = update_ yyact 8
(fn () => repr(let
val d__1__ = peekVal 2 : var
val d__3__ = peekVal 0 : tigerabs.exp
in
( AssignExp({var=(d__1__), exp=(d__3__)}, P()) ) end : tigerabs.exp))
;
(* Rule 9, file tigergrm.y, line 64 *)
val _ = update_ yyact 9
(fn () => repr(let
val d__2__ = peekVal 3 : tigerabs.exp
val d__4__ = peekVal 1 : tigerabs.exp list
in
( SeqExp((d__2__)::(d__4__), P()) ) end : tigerabs.exp))
;
(* Rule 10, file tigergrm.y, line 65 *)
val _ = update_ yyact 10
(fn () => repr(let
val d__1__ = peekVal 2 : tigerabs.exp
val d__3__ = peekVal 0 : tigerabs.exp
in
( IfExp({test=(d__1__), then'=IntExp(1, P()),
								else'=SOME (d__3__)}, P()) ) end : tigerabs.exp))
;
(* Rule 11, file tigergrm.y, line 67 *)
val _ = update_ yyact 11
(fn () => repr(let
val d__1__ = peekVal 2 : tigerabs.exp
val d__3__ = peekVal 0 : tigerabs.exp
in
( IfExp({test=(d__1__), then'=(d__3__),
								else'=SOME(IntExp(0, P()))}, P()) ) end : tigerabs.exp))
;
(* Rule 12, file tigergrm.y, line 69 *)
val _ = update_ yyact 12
(fn () => repr(let
val d__1__ = peekVal 2 : tigerabs.exp
val d__3__ = peekVal 0 : tigerabs.exp
in
( OpExp({left=(d__1__), oper=EqOp, right=(d__3__)}, P()) ) end : tigerabs.exp))
;
(* Rule 13, file tigergrm.y, line 70 *)
val _ = update_ yyact 13
(fn () => repr(let
val d__1__ = peekVal 2 : tigerabs.exp
val d__3__ = peekVal 0 : tigerabs.exp
in
( OpExp({left=(d__1__), oper=LtOp, right=(d__3__)}, P()) ) end : tigerabs.exp))
;
(* Rule 14, file tigergrm.y, line 71 *)
val _ = update_ yyact 14
(fn () => repr(let
val d__1__ = peekVal 2 : tigerabs.exp
val d__3__ = peekVal 0 : tigerabs.exp
in
( OpExp({left=(d__1__), oper=LeOp, right=(d__3__)}, P()) ) end : tigerabs.exp))
;
(* Rule 15, file tigergrm.y, line 72 *)
val _ = update_ yyact 15
(fn () => repr(let
val d__1__ = peekVal 2 : tigerabs.exp
val d__3__ = peekVal 0 : tigerabs.exp
in
( OpExp({left=(d__1__), oper=GtOp, right=(d__3__)}, P()) ) end : tigerabs.exp))
;
(* Rule 16, file tigergrm.y, line 73 *)
val _ = update_ yyact 16
(fn () => repr(let
val d__1__ = peekVal 2 : tigerabs.exp
val d__3__ = peekVal 0 : tigerabs.exp
in
( OpExp({left=(d__1__), oper=GeOp, right=(d__3__)}, P()) ) end : tigerabs.exp))
;
(* Rule 17, file tigergrm.y, line 74 *)
val _ = update_ yyact 17
(fn () => repr(let
val d__1__ = peekVal 2 : tigerabs.exp
val d__3__ = peekVal 0 : tigerabs.exp
in
( OpExp({left=(d__1__), oper=NeqOp, right=(d__3__)}, P()) ) end : tigerabs.exp))
;
(* Rule 18, file tigergrm.y, line 75 *)
val _ = update_ yyact 18
(fn () => repr(let
val d__1__ = peekVal 2 : tigerabs.exp
val d__3__ = peekVal 0 : tigerabs.exp
in
( OpExp({left=(d__1__), oper=PlusOp, right=(d__3__)}, P()) ) end : tigerabs.exp))
;
(* Rule 19, file tigergrm.y, line 76 *)
val _ = update_ yyact 19
(fn () => repr(let
val d__1__ = peekVal 2 : tigerabs.exp
val d__3__ = peekVal 0 : tigerabs.exp
in
( OpExp({left=(d__1__), oper=MinusOp, right=(d__3__)}, P()) ) end : tigerabs.exp))
;
(* Rule 20, file tigergrm.y, line 77 *)
val _ = update_ yyact 20
(fn () => repr(let
val d__1__ = peekVal 2 : tigerabs.exp
val d__3__ = peekVal 0 : tigerabs.exp
in
( OpExp({left=(d__1__), oper=TimesOp, right=(d__3__)}, P()) ) end : tigerabs.exp))
;
(* Rule 21, file tigergrm.y, line 78 *)
val _ = update_ yyact 21
(fn () => repr(let
val d__1__ = peekVal 2 : tigerabs.exp
val d__3__ = peekVal 0 : tigerabs.exp
in
( OpExp({left=(d__1__), oper=DivideOp, right=(d__3__)}, P()) ) end : tigerabs.exp))
;
(* Rule 22, file tigergrm.y, line 79 *)
val _ = update_ yyact 22
(fn () => repr(let
val d__2__ = peekVal 0 : tigerabs.exp
in
( OpExp({left=IntExp(0, P()),
								oper=MinusOp, right=(d__2__)}, P()) ) end : tigerabs.exp))
;
(* Rule 23, file tigergrm.y, line 81 *)
val _ = update_ yyact 23
(fn () => repr(let
val d__2__ = peekVal 1 : tigerabs.exp
in
( (d__2__) ) end : tigerabs.exp))
;
(* Rule 24, file tigergrm.y, line 82 *)
val _ = update_ yyact 24
(fn () => repr(let
val d__1__ = peekVal 3 : string
val d__3__ = peekVal 1 : tigerabs.exp list
in
( CallExp({func=(d__1__), args=(d__3__)}, P()) ) end : tigerabs.exp))
;
(* Rule 25, file tigergrm.y, line 83 *)
val _ = update_ yyact 25
(fn () => repr(let
val d__2__ = peekVal 2 : tigerabs.exp
val d__4__ = peekVal 0 : tigerabs.exp
in
( IfExp({test=(d__2__), then'=(d__4__), else'=NONE}, P()) ) end : tigerabs.exp))
;
(* Rule 26, file tigergrm.y, line 85 *)
val _ = update_ yyact 26
(fn () => repr(let
val d__2__ = peekVal 4 : tigerabs.exp
val d__4__ = peekVal 2 : tigerabs.exp
val d__6__ = peekVal 0 : tigerabs.exp
in
( IfExp({test=(d__2__), then'=(d__4__), else'=SOME (d__6__)}, P()) ) end : tigerabs.exp))
;
(* Rule 27, file tigergrm.y, line 86 *)
val _ = update_ yyact 27
(fn () => repr(let
val d__2__ = peekVal 2 : tigerabs.exp
val d__4__ = peekVal 0 : tigerabs.exp
in
( WhileExp({test=(d__2__), body=(d__4__)}, P()) ) end : tigerabs.exp))
;
(* Rule 28, file tigergrm.y, line 88 *)
val _ = update_ yyact 28
(fn () => repr(let
val d__2__ = peekVal 6 : string
val d__4__ = peekVal 4 : tigerabs.exp
val d__6__ = peekVal 2 : tigerabs.exp
val d__8__ = peekVal 0 : tigerabs.exp
in
( ForExp({var=(d__2__), escape=ref false,
								lo=(d__4__), hi=(d__6__), body=(d__8__)}, P()) ) end : tigerabs.exp))
;
(* Rule 29, file tigergrm.y, line 90 *)
val _ = update_ yyact 29
(fn () => repr(let
val d__2__ = peekVal 2 : tigerabs.dec list
in
( LetExp({decs=(d__2__), body=UnitExp(P())}, P()) ) end : tigerabs.exp))
;
(* Rule 30, file tigergrm.y, line 91 *)
val _ = update_ yyact 30
(fn () => repr(let
val d__2__ = peekVal 3 : tigerabs.dec list
val d__4__ = peekVal 1 : tigerabs.exp
in
( LetExp({decs=(d__2__), body=(d__4__)}, P()) ) end : tigerabs.exp))
;
(* Rule 31, file tigergrm.y, line 93 *)
val _ = update_ yyact 31
(fn () => repr(let
val d__2__ = peekVal 5 : tigerabs.dec list
val d__4__ = peekVal 3 : tigerabs.exp
val d__6__ = peekVal 1 : tigerabs.exp list
in
( LetExp({decs=(d__2__),
								body=SeqExp((d__4__)::(d__6__), P())}, P()) ) end : tigerabs.exp))
;
(* Rule 32, file tigergrm.y, line 96 *)
val _ = update_ yyact 32
(fn () => repr(let
val d__1__ = peekVal 5 : var
val d__3__ = peekVal 3 : tigerabs.exp
val d__6__ = peekVal 0 : tigerabs.exp
in
( ArrayExp({typ=nombre (d__1__), size=(d__3__), init=(d__6__)}, P()) ) end : tigerabs.exp))
;
(* Rule 33, file tigergrm.y, line 97 *)
val _ = update_ yyact 33
(fn () => repr(let
val d__1__ = peekVal 3 : string
val d__3__ = peekVal 1 : (tigerabs.symbol*tigerabs.exp) list
in
( RecordExp({fields=(d__3__), typ=(d__1__)}, P()) ) end : tigerabs.exp))
;
(* Rule 34, file tigergrm.y, line 99 *)
val _ = update_ yyact 34
(fn () => repr(let
val d__1__ = peekVal 2 : tigerabs.exp
val d__3__ = peekVal 0 : tigerabs.exp list
in
( (d__1__)::(d__3__) ) end : tigerabs.exp list))
;
(* Rule 35, file tigergrm.y, line 100 *)
val _ = update_ yyact 35
(fn () => repr(let
val d__1__ = peekVal 0 : tigerabs.exp
in
( [(d__1__)] ) end : tigerabs.exp list))
;
(* Rule 36, file tigergrm.y, line 103 *)
val _ = update_ yyact 36
(fn () => repr(let
val d__1__ = peekVal 4 : string
val d__3__ = peekVal 2 : tigerabs.exp
val d__5__ = peekVal 0 : (tigerabs.symbol*tigerabs.exp) list
in
( ((d__1__), (d__3__))::(d__5__) ) end : (tigerabs.symbol*tigerabs.exp) list))
;
(* Rule 37, file tigergrm.y, line 104 *)
val _ = update_ yyact 37
(fn () => repr(let
val d__1__ = peekVal 2 : string
val d__3__ = peekVal 0 : tigerabs.exp
in
( [((d__1__), (d__3__))] ) end : (tigerabs.symbol*tigerabs.exp) list))
;
(* Rule 38, file tigergrm.y, line 105 *)
val _ = update_ yyact 38
(fn () => repr(let
in
( [] ) end : (tigerabs.symbol*tigerabs.exp) list))
;
(* Rule 39, file tigergrm.y, line 107 *)
val _ = update_ yyact 39
(fn () => repr(let
val d__1__ = peekVal 1 : tigerabs.dec
val d__2__ = peekVal 0 : tigerabs.dec list
in
( fundeLFunTipos((d__1__), (d__2__)) ) end : tigerabs.dec list))
;
(* Rule 40, file tigergrm.y, line 108 *)
val _ = update_ yyact 40
(fn () => repr(let
in
( [] ) end : tigerabs.dec list))
;
(* Rule 41, file tigergrm.y, line 110 *)
val _ = update_ yyact 41
(fn () => repr(let
val d__2__ = peekVal 2 : string
val d__4__ = peekVal 0 : tigerabs.ty
in
( TypeDec[({name=(d__2__), ty=(d__4__)}, P())] ) end : tigerabs.dec))
;
(* Rule 42, file tigergrm.y, line 111 *)
val _ = update_ yyact 42
(fn () => repr(let
val d__1__ = peekVal 0 : tigerabs.dec
in
( (d__1__) ) end : tigerabs.dec))
;
(* Rule 43, file tigergrm.y, line 112 *)
val _ = update_ yyact 43
(fn () => repr(let
val d__1__ = peekVal 0 : tigerabs.dec
in
( (d__1__) ) end : tigerabs.dec))
;
(* Rule 44, file tigergrm.y, line 114 *)
val _ = update_ yyact 44
(fn () => repr(let
val d__1__ = peekVal 0 : string
in
( NameTy (d__1__) ) end : tigerabs.ty))
;
(* Rule 45, file tigergrm.y, line 115 *)
val _ = update_ yyact 45
(fn () => repr(let
val d__2__ = peekVal 1 : tigerabs.field list
in
( RecordTy (d__2__) ) end : tigerabs.ty))
;
(* Rule 46, file tigergrm.y, line 116 *)
val _ = update_ yyact 46
(fn () => repr(let
val d__3__ = peekVal 0 : string
in
( ArrayTy (d__3__) ) end : tigerabs.ty))
;
(* Rule 47, file tigergrm.y, line 118 *)
val _ = update_ yyact 47
(fn () => repr(let
val d__1__ = peekVal 0 : string
in
( (d__1__) ) end : string))
;
(* Rule 48, file tigergrm.y, line 121 *)
val _ = update_ yyact 48
(fn () => repr(let
val d__1__ = peekVal 2 : tigerabs.field
val d__3__ = peekVal 0 : tigerabs.field list
in
( (d__1__)::(d__3__) ) end : tigerabs.field list))
;
(* Rule 49, file tigergrm.y, line 122 *)
val _ = update_ yyact 49
(fn () => repr(let
val d__1__ = peekVal 0 : tigerabs.field
in
( [(d__1__)] ) end : tigerabs.field list))
;
(* Rule 50, file tigergrm.y, line 123 *)
val _ = update_ yyact 50
(fn () => repr(let
in
( [] ) end : tigerabs.field list))
;
(* Rule 51, file tigergrm.y, line 125 *)
val _ = update_ yyact 51
(fn () => repr(let
val d__2__ = peekVal 2 : string
val d__4__ = peekVal 0 : tigerabs.exp
in
( VarDec({name=(d__2__), escape=ref false,
								typ=NONE, init=(d__4__)}, P()) ) end : tigerabs.dec))
;
(* Rule 52, file tigergrm.y, line 128 *)
val _ = update_ yyact 52
(fn () => repr(let
val d__2__ = peekVal 4 : string
val d__4__ = peekVal 2 : string
val d__6__ = peekVal 0 : tigerabs.exp
in
( VarDec({name=(d__2__), escape=ref false,
								typ=SOME (d__4__), init=(d__6__)}, P()) ) end : tigerabs.dec))
;
(* Rule 53, file tigergrm.y, line 132 *)
val _ = update_ yyact 53
(fn () => repr(let
val d__2__ = peekVal 5 : string
val d__4__ = peekVal 3 : tigerabs.field list
val d__7__ = peekVal 0 : tigerabs.exp
in
( FunctionDec[({name=(d__2__), params=(d__4__),
								result=NONE, body=(d__7__)}, P())] ) end : tigerabs.dec))
;
(* Rule 54, file tigergrm.y, line 135 *)
val _ = update_ yyact 54
(fn () => repr(let
val d__2__ = peekVal 7 : string
val d__4__ = peekVal 5 : tigerabs.field list
val d__7__ = peekVal 2 : string
val d__9__ = peekVal 0 : tigerabs.exp
in
( FunctionDec[({name=(d__2__), params=(d__4__),
								result=SOME (d__7__), body=(d__9__)}, P())] ) end : tigerabs.dec))
;
(* Rule 55, file tigergrm.y, line 138 *)
val _ = update_ yyact 55
(fn () => repr(let
val d__1__ = peekVal 2 : string
val d__3__ = peekVal 0 : string
in
( {escape=ref false, name=(d__1__), typ=NameTy (d__3__)} ) end : tigerabs.field))
;
(* Rule 56, file tigergrm.y, line 140 *)
val _ = update_ yyact 56
(fn () => repr(let
val d__1__ = peekVal 2 : tigerabs.exp
val d__3__ = peekVal 0 : tigerabs.exp list
in
( (d__1__)::(d__3__) ) end : tigerabs.exp list))
;
(* Rule 57, file tigergrm.y, line 141 *)
val _ = update_ yyact 57
(fn () => repr(let
val d__1__ = peekVal 0 : tigerabs.exp
in
( [(d__1__)] ) end : tigerabs.exp list))
;
(* Rule 58, file tigergrm.y, line 142 *)
val _ = update_ yyact 58
(fn () => repr(let
in
( [] ) end : tigerabs.exp list))
;
(* Rule 59, file tigergrm.y, line 144 *)
val _ = update_ yyact 59
(fn () => repr(let
val d__1__ = peekVal 0 : string
in
( SimpleVar (d__1__) ) end : var))
;
(* Rule 60, file tigergrm.y, line 145 *)
val _ = update_ yyact 60
(fn () => repr(let
val d__1__ = peekVal 2 : var
val d__3__ = peekVal 0 : string
in
( FieldVar((d__1__), (d__3__)) ) end : var))
;
(* Rule 61, file tigergrm.y, line 146 *)
val _ = update_ yyact 61
(fn () => repr(let
val d__1__ = peekVal 3 : var
val d__3__ = peekVal 1 : tigerabs.exp
in
( SubscriptVar((d__1__), (d__3__)) ) end : var))
;
(* Entry prog *)
val _ = update_ yyact 62 (fn () => raise yyexit (peekVal 0));
val yytables : parseTables =
  ( yyact,
    yytransl,
    yylhs,
    yylen,
    yydefred,
    yydgoto,
    yysindex,
    yyrindex,
    yygindex,
    YYTABLESIZE,
    yytable,
    yycheck );
fun prog lexer lexbuf = yyparse yytables 1 lexer lexbuf;
